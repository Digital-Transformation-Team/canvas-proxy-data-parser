import io
import os.path
import tempfile
from constants import IMAGE_DATA_FILE
from googleapiclient.http import MediaIoBaseDownload
from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
from models import Image
from utils import replace_kazakh_chars

SCOPES = [
    "https://www.googleapis.com/auth/drive.metadata.readonly",
    "https://www.googleapis.com/auth/drive.readonly",
]


def get_service():
    """Shows basic usage of the Drive v3 API.
    Prints the names and ids of the first 10 files the user has access to.
    """
    creds = None
    # The file token.json stores the user's access and refresh tokens, and is
    # created automatically when the authorization flow completes for the first
    # time.
    if os.path.exists("token.json"):
        creds = Credentials.from_authorized_user_file("token.json", SCOPES)
    # If there are no (valid) credentials available, let the user log in.
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file("credentials.json", SCOPES)
            creds = flow.run_local_server(port=0)
        # Save the credentials for the next run
        with open("token.json", "w") as token:
            token.write(creds.to_json())

    try:
        service = build("drive", "v3", credentials=creds)

        return service
    except HttpError as error:
        # TODO(developer) - Handle errors from drive API.
        print(f"An error occurred: {error}")


def retrieve_photos(service, folder_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –ø–∞–ø–∫–µ, —Ä–∞–∑–±–∏–≤–∞—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    query = f"'{folder_id}' in parents and mimeType contains 'image/'"
    image_ids = []

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏
    with open(IMAGE_DATA_FILE, "w") as file:
        next_page_token = None

        while True:
            results = (
                service.files()
                .list(
                    q=query,
                    fields="nextPageToken, files(id, name, mimeType)",
                    pageSize=1000,
                    pageToken=next_page_token,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                )
                .execute()
            )

            photos = results.get("files", [])
            if not photos:
                break  # –ï—Å–ª–∏ —Ñ–∞–π–ª–æ–≤ –Ω–µ—Ç, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º —Ü–∏–∫–ª

            for photo in photos:
                name = (
                    photo["name"]
                    .replace(".jpg", "")
                    .replace("NONE", "")
                    .lower()
                    .strip()
                )
                image = Image(
                    origin_name=name,
                    name=replace_kazakh_chars(name),
                    id=photo["id"],
                )
                file.write(image.to_str() + "\n")
                image_ids.append(image)

            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            next_page_token = results.get("nextPageToken")
            if not next_page_token:
                break  # –ï—Å–ª–∏ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ—Ç, –≤—ã—Ö–æ–¥–∏–º

    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏ –∑–∞–ø–∏—Å–∞–Ω–æ {len(image_ids)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")
    return image_ids


def download_and_process_image(image_id, service):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ ID, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –µ–≥–æ –∏ —É–¥–∞–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª"""

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –±–µ–∑ –æ—Ç–∫—Ä—ã—Ç–∏—è –µ–≥–æ
    with tempfile.NamedTemporaryFile(
        delete=False, mode="wb", suffix=".jpg"
    ) as temp_file:
        temp_file_name = temp_file.name  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞

    # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    request = service.files().get_media(fileId=image_id)
    with io.FileIO(temp_file_name, "wb") as f:
        downloader = MediaIoBaseDownload(f, request)
        done = False
        while done is False:
            status, done = downloader.next_chunk()
            print(f"–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è: {int(status.progress() * 100)}%")

    print("–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    os.remove(temp_file_name)  # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª

    print(f"–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã: {temp_file_name}")


def get_target_folder_id(service, folder_name):
    """–ù–∞—Ö–æ–¥–∏—Ç ID –ø–∞–ø–∫–∏ –ø–æ –µ—ë –Ω–∞–∑–≤–∞–Ω–∏—é"""
    query = f"mimeType='application/vnd.google-apps.folder' and name='{folder_name}'"
    results = service.files().list(q=query, fields="files(id, name)").execute()
    folders = results.get("files", [])

    if not folders:
        print(f"‚ùå –ü–∞–ø–∫–∞ '{folder_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return None

    folder_id = folders[0]["id"]
    print(f"üìÇ –ù–∞–π–¥–µ–Ω ID –ø–∞–ø–∫–∏ '{folder_name}': {folder_id}")
    return folder_id
