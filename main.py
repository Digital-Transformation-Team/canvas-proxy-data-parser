from typing import Optional
import pandas as pd
from dataclasses import dataclass
import io
import os.path
import tempfile
from googleapiclient.http import MediaIoBaseDownload
from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError

# If modifying these scopes, delete the file token.json.
SCOPES = [
    "https://www.googleapis.com/auth/drive.metadata.readonly",
    "https://www.googleapis.com/auth/drive.readonly",
]


@dataclass
class Image:
    name: str
    id: str


@dataclass
class Student:
    name: str
    canvas_name: str
    canvas_id: int
    image_id: Optional[str] = None

    def __repr__(self):
        return f"Student {self.canvas_id}: {self.name}"


def process_students() -> list[Student]:
    file_path = "students.xls"
    # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª –≤ pandas DataFrame
    df = pd.read_excel(file_path)

    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ Student, –º–∞–ø–ø–∏—Ä—É—è –¥–∞–Ω–Ω—ã–µ –∏–∑ DataFrame
    students = []
    for _, row in df.iterrows():
        # –ó–∞–º–∞–ø–ø–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–æ–ª–±—Ü–æ–≤ –Ω–∞ –∞—Ç—Ä–∏–±—É—Ç—ã Student
        student = Student(
            name=f"{row['–§–∞–º–∏–ª–∏—è']} {row['–ò–º—è']} {row['–û—Ç—á–µ—Å—Ç–≤–æ']}",
            canvas_name=row["–ö–∞–Ω–≤–∞—Å"],
            canvas_id=int(row["ID"]),  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
        )
        students.append(student)

    return students


def process_image(image_id, service):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ ID, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –µ–≥–æ –∏ —É–¥–∞–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª"""

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –±–µ–∑ –æ—Ç–∫—Ä—ã—Ç–∏—è –µ–≥–æ
    with tempfile.NamedTemporaryFile(
        delete=False, mode="wb", suffix=".jpg"
    ) as temp_file:
        temp_file_name = temp_file.name  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞

    # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    request = service.files().get_media(fileId=image_id)
    with io.FileIO(temp_file_name, "wb") as f:
        downloader = MediaIoBaseDownload(f, request)
        done = False
        while done is False:
            status, done = downloader.next_chunk()
            print(f"–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è: {int(status.progress() * 100)}%")

    print("–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    os.remove(temp_file_name)  # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª

    print(f"–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã: {temp_file_name}")


def get_folder_id(service, folder_name):
    """–ù–∞—Ö–æ–¥–∏—Ç ID –ø–∞–ø–∫–∏ –ø–æ –µ—ë –Ω–∞–∑–≤–∞–Ω–∏—é"""
    query = f"mimeType='application/vnd.google-apps.folder' and name='{folder_name}'"
    results = service.files().list(q=query, fields="files(id, name)").execute()
    folders = results.get("files", [])

    if not folders:
        print(f"‚ùå –ü–∞–ø–∫–∞ '{folder_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return None

    folder_id = folders[0]["id"]
    print(f"üìÇ –ù–∞–π–¥–µ–Ω ID –ø–∞–ø–∫–∏ '{folder_name}': {folder_id}")
    return folder_id


def get_photos_in_folder(service, folder_id) -> list[Image]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –ø–∞–ø–∫–µ"""
    query = f"'{folder_id}' in parents and mimeType contains 'image/'"
    results = (
        service.files().list(q=query, fields="files(id, name, mimeType)").execute()
    )
    photos = results.get("files", [])

    if not photos:
        print("üìÇ –í –ø–∞–ø–∫–µ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")
        return

    print("üñº –°–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –ø–∞–ø–∫–µ:")
    image_ids = []
    for photo in photos:
        image = Image(name=photo["name"], id=photo["id"])
        image_ids.append(image)
    return image_ids


def get_service():
    """Shows basic usage of the Drive v3 API.
    Prints the names and ids of the first 10 files the user has access to.
    """
    creds = None
    # The file token.json stores the user's access and refresh tokens, and is
    # created automatically when the authorization flow completes for the first
    # time.
    if os.path.exists("token.json"):
        creds = Credentials.from_authorized_user_file("token.json", SCOPES)
    # If there are no (valid) credentials available, let the user log in.
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file("credentials.json", SCOPES)
            creds = flow.run_local_server(port=0)
        # Save the credentials for the next run
        with open("token.json", "w") as token:
            token.write(creds.to_json())

    try:
        service = build("drive", "v3", credentials=creds)

        return service
    except HttpError as error:
        # TODO(developer) - Handle errors from drive API.
        print(f"An error occurred: {error}")


def get_student_image(student: Student, images: list[Image]) -> Image:
    for image in images:
        if image.name.lower() == student.name.lower():
            return image
    return None


if __name__ == "__main__":
    service = get_service()
    folder_id = get_folder_id(service, "gen_photos")
    images = get_photos_in_folder(service, folder_id)
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(images)} —Ñ–æ—Ç–æ")
    students = process_students()
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(students)} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")

    # Compare images and students
    counter = 0
    for student in students:
        # Find image for this student
        image: Image = get_student_image(student, images)
        if image is not None:
            counter += 1
        # student.image_id = image.id
    print(f"Found images for {counter} students. Total students: {len(students)}")

    # for image_id in image_ids:
    #     result = process_image(service=service, image_id=image_id)
